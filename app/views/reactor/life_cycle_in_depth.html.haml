%span.home-message
%br/

= react_component('ComponentLifeCycle', name: 'GorbyPuff')

%pre
  %code
    :preserve
    :escaped

      // reactor/life_cycle_in_depth.html.haml
      = react_component('ComponentLifeCycle', name: 'GorbyPuff')

      // app/assets/components/component_life_cycle.es6.jsx
      class ComponentLifeCycle extends React.Component {<br/><br/>  constructor(props) {<br/>    super(props);<br/>    this.state = { status: true};<br/>  }<br/><br/>  componentWillMount () {<br/>    console.log('componentWillMount');<br/>  }<br/><br/>  componentDidMount () {<br/>    console.log('componentDidMount');<br/>  }<br/><br/>  componentWillReceiveProps (nextProps) {<br/>    console.log('componentWillReceiveProps');<br/>  }<br/><br/>  shouldComponentUpdate (nextProps, nextState) {<br/>    console.log('shouldComponentUpdate');<br/>    return true;<br/>  }<br/><br/>  componentWillUpdate () {<br/>    console.log('componentWillUpdate');<br/>  }<br/><br/>  render () {<br/>    console.log(&quot;render&quot;);<br/><br/>    return &lt;h1 onClick={this.toggleState.bind(this)}&gt;<br/>             {this.state.status.toString()}<br/>    &lt;/h1&gt;<br/>  }<br/><br/>  componentWillUnmount () {<br/>    console.log('componentWillUnmount')<br/>  }<br/><br/>  toggleState () {<br/>    this.setState({status: !this.state.status})<br/>  }<br/><br/>}<br/><br/>// componentWillMount<br/>// componentDidMount<br/>// componentWillReceiveProps(object nextProps)<br/>// boolean shouldComponentUpdate(object nextProps, object nextState)<br/>// componentWillUpdate(object nextProps, object nextState)<br/>// componentDidUpdate(object prevProps, object prevState)<br/>// componentWillUnmount()<br/>// React.unmountComponentAtNode(document.body)<br/>
